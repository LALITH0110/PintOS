            +--------------------+
            |        CS 140      |
            | PROJECT 1: THREADS |
            |   DESIGN DOCUMENT  |
            +--------------------+

---- GROUP ----

>> Fill in the names and email addresses of your group members.

Edison Mei <emei4@hawk.iit.edu>
Adrian Wenzen <awenzen@hawk.iit.edu>
Lalith Kothuru <lkothuru@hawk.iit.edu>

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.
        N/A 
>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course staff.
        N/A

                 ALARM CLOCK
                 ===========

---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

In thread.h (thread)-
    int64_t ticks_blocked;              /* Ticks that the thread need to be blocked. */
    int base_priority;                  /* Base priority of a thread */
    int original_priority;              /* Priority, before donation */
    int64_t sleep_endtick;              /* The tick after which the thread should awake (if the thread is in sleep) */
    /* Shared between thread.c and synch.c. */
    struct list_elem elem;              /* List element. */
    

---- ALGORITHMS ----

>> A2: Briefly describe what happens in a call to timer_sleep(),
>> including the effects of the timer interrupt handler.

            "When timer_sleep(ticks) is called, the current thread is taken off the ready list and placed onto the alarm list.The timer interrupt handler determines if any alarms have expired and puts the threads back onto the ready list."

>> A3: What steps are taken to minimize the amount of time spent in
>> the timer interrupt handler?

"To minimize time in the timer interrupt handler, the code updates statistics and enforces preemption
only when necessary, ensuring that the handler remains lightweight and efficient. This approach prevents 
extensive computations within the interrupt context, keeping the system responsive."

---- SYNCHRONIZATION ----

>> A4: How are race conditions avoided when multiple threads call
>> timer_sleep() simultaneously?

            "Use locks to limit access to the ready list and sleeping threads list, allowing only one thread to alter them at a time."

>> A5: How are race conditions avoided when a timer interrupt occurs
>> during a call to timer_sleep()?

            "Disable interruptions when updating the alarm list to avoid concurrent access."

---- RATIONALE ----

>> A6: Why did you choose this design?  In what ways is it superior to
>> another design you considered?

"The design choice emphasizes simplicity and efficiency by using a round-robin scheduler 
with optional multi-level feedback queue (MLFQS) support. This design is superior because 
it balances fairness and responsiveness, allowing for easy integration of more complex 
scheduling algorithms like MLFQS, which can adapt to changing system conditions."

             PRIORITY SCHEDULING
             ===================

---- DATA STRUCTURES ----

>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

In thread.h (thread)-
    int64_t ticks_blocked;              /* Ticks that the thread need to be blocked. */
    int base_priority;                  /* Base priority of a thread */
    struct list locks_holding;          /* List of locks the thread is holding. */ 
    struct lock *lock_waiting4;         /* The lock the thread is waiting for. */ 
    int original_priority;              /* Priority, before donation */
    struct list_elem waitelem;          /* List element, stored in the wait_list queue */
    int64_t sleep_endtick;              /* The tick after which the thread should awake (if the thread is in sleep) */
    /* Shared between thread.c and synch.c. */
    struct list_elem elem;              /* List element. */

In synch.h (lock)-
    struct list_elem elem;      /* The list element stored for priority donation. */
    int max_priority;           /* The maximum priority among the priorities of threads acquiring the lock. */

>> B2: Explain the data structure used to track priority donation.
>> Use ASCII art to diagram a nested donation.  (Alternately, submit a
>> .png file.)

---- ALGORITHMS ----

>> B3: How do you ensure that the highest priority thread waiting for
>> a lock, semaphore, or condition variable wakes up first?

            "To handle threads waiting for locks, use a priority queue, with the highest priority thread at the front."

>> B4: Describe the sequence of events when a call to lock_acquire()
>> causes a priority donation.  How is nested donation handled?

            "If a thread gains a lock, its priority is increased to match that of the thread that is waiting the longest."

>> B5: Describe the sequence of events when lock_release() is called
>> on a lock that a higher-priority thread is waiting for.

            "The waiting thread with the greatest priority is roused and scheduled when the lock is freed."

---- SYNCHRONIZATION ----

>> B6: Describe a potential race in thread_set_priority() and explain
>> how your implementation avoids it.  Can you use a lock to avoid
>> this race?

            "Protect priority changes by using a lock to stop concurrent changes."

---- RATIONALE ----

>> B7: Why did you choose this design?  In what ways is it superior to
>> another design you considered?

            "Using a priority queue allows for more efficient scheduling depending on priority."

              ADVANCED SCHEDULER
              ==================

---- DATA STRUCTURES ----

>> C1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

---- ALGORITHMS ----

>> C2: Suppose threads A, B, and C have nice values 0, 1, and 2.  Each
>> has a recent_cpu value of 0.  Fill in the table below showing the
>> scheduling decision and the priority and recent_cpu values for each
>> thread after each given number of timer ticks:

timer  recent_cpu    priority   thread
ticks   A   B   C   A   B   C   to run
-----  --  --  --  --  --  --   ------
 0
 4
 8
12
16
20
24
28
32
36

>> C3: Did any ambiguities in the scheduler specification make values
>> in the table uncertain?  If so, what rule did you use to resolve
>> them?  Does this match the behavior of your scheduler?

>> C4: How is the way you divided the cost of scheduling between code
>> inside and outside interrupt context likely to affect performance?


---- RATIONALE ----

>> C5: Briefly critique your design, pointing out advantages and
>> disadvantages in your design choices.  If you were to have extra
>> time to work on this part of the project, how might you choose to
>> refine or improve your design?

>> C6: The assignment explains arithmetic for fixed-point math in
>> detail, but it leaves it open to you to implement it.  Why did you
>> decide to implement it the way you did?  If you created an
>> abstraction layer for fixed-point math, that is, an abstract data
>> type and/or a set of functions or macros to manipulate fixed-point
>> numbers, why did you do so?  If not, why not?

               SURVEY QUESTIONS
               ================

Answering these questions is optional, but it will help us improve the
course in future quarters.  Feel free to tell us anything you
want--these questions are just to spur your thoughts.  You may also
choose to respond anonymously in the course evaluations at the end of
the quarter.

>> In your opinion, was this assignment, or any one of the three problems
>> in it, too easy or too hard?  Did it take too long or too little time?

    "I don't think anything is too hard, however I would say it was challenging
    to balance both this project, as well as the other assignments and exams 
    for this class, as well as the assignments, projects, and exams for other
    classes." ~Edison Mei

" It was time consuming, fun, The first two problems took lesser 
time than the last one (as mentioned by the professor)" ~Lalith Kothuru

>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?
    
    Working on the overall assignment gave some insight on the more technical
    side of OS design, as opposed to the more "theoretical" approach we usually
    see in class.

>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?

    "I didn't find any of the given guidance to be misleading. Everything had
    its reasons. I do think that having a lab section for the class though would
    make it easier to work with the Docker environment. Especially when this class
    is likely the first time most students have heard of and used it." ~Edison Mei

>> Do you have any suggestions for the TAs to more effectively assist
>> students, either for future quarters or the remaining projects?
    
    "None that I can think of. I've had little interactions with the TAs so I don't
    have anything specific to say. I do think that they respond well and in a timely
    manner on piazza though." ~Edison Mei

>> Any other comments?
    N/A 
